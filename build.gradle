buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
    jcenter()
  }

  dependencies {
    classpath "net.serenity-bdd:serenity-gradle-plugin:$serenityVersion"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

import org.apache.tools.ant.taskdefs.condition.Os
import net.thucydides.core.guice.Injectors
import net.thucydides.core.util.EnvironmentVariables


task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

apply plugin: 'java'
sourceCompatibility = 1.8

apply plugin: 'org.springframework.boot'
apply plugin: 'application'

repositories {
  mavenCentral()
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
      "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
      "commons-io:commons-io:$commonsIoVersion"
  testCompile 'junit:junit:4.12',
      "net.serenity-bdd:serenity-junit:$serenityVersion",
      "net.serenity-bdd:serenity-screenplay:$serenityVersion",
      "net.serenity-bdd:serenity-screenplay-webdriver:$serenityVersion"
}

sourceSets.test.java.srcDirs = ['src/programmer-test/java', 'src/customer-test/java']

defaultTasks 'build'



apply plugin: 'eclipse'

eclipse.classpath.defaultOutputDir = file('classes')



apply plugin: 'checkstyle'
checkstyle {
  configFile = rootProject.file('config/checkstyle.xml')
  toolVersion = '7.7'
  ignoreFailures = false
  maxErrors = 0
  maxWarnings = 0
}

apply plugin: 'pmd'
pmd {
  ruleSetFiles = rootProject.files('config/pmd.xml')
  toolVersion = '5.7.0'
  ignoreFailures = false
}

apply plugin: 'findbugs'
findbugs {
  toolVersion = '3.0.1'
  excludeFilter = rootProject.file('config/findbugs_filter.xml')
  ignoreFailures = false
}

apply plugin: 'jacoco'
jacoco {
  toolVersion = '0.7.9'
}
jacocoTestReport {
  dependsOn 'test'
  reports {
    xml.enabled true
    html.enabled true
  }
}
check.dependsOn jacocoTestReport

apply from: rootProject.file('gradle/jdepend.gradle')



apply plugin: 'net.serenity-bdd.aggregator'
file('serenity.properties').withInputStream { input ->
  Injectors.getInjector().getProvider(EnvironmentVariables).get().getProperties().load(input)
}
[clearReports, aggregate, checkOutcomes].each {
  it.logging.level = LogLevel.ERROR
}


ext {
  binariesDir = file('src/install')
  phantomVersion = '2.1.1-' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'windows' :  Os.isFamily(Os.FAMILY_MAC) ? 'macosx' :
      'linux-x86_64')
  phantomInstallFile = new File(binariesDir,'phantom/phantomjs-' + phantomVersion + '.zip')
  phantomInstallDir = new File(project.buildDir, 'phantom')
  phantomBinary = new File(phantomInstallDir, 'bin/phantomjs' + (Os.isFamily(Os.FAMILY_WINDOWS) ? '.exe' : ''))
}

task installPhantom(type: Copy) {
  group 'any cluster'
  from zipTree(phantomInstallFile)
  into phantomInstallDir
}

test {
  dependsOn installPhantom
  systemProperty 'phantomjs.binary.path', phantomBinary.path
  finalizedBy aggregate, checkOutcomes
}
